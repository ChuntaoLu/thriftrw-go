// Code generated by MockGen. DO NOT EDIT.

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Source: go.uber.org/thriftrw/protocol (interfaces: Protocol,EnvelopeAgnosticProtocol,EnvelopeSpecificResponder)

package thrifttest

import (
	gomock "github.com/golang/mock/gomock"
	protocol "go.uber.org/thriftrw/protocol"
	wire "go.uber.org/thriftrw/wire"
	io "io"
	reflect "reflect"
)

// MockProtocol is a mock of Protocol interface
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return _m.recorder
}

// Decode mocks base method
func (_m *MockProtocol) Decode(_param0 io.ReaderAt, _param1 wire.Type) (wire.Value, error) {
	ret := _m.ctrl.Call(_m, "Decode", _param0, _param1)
	ret0, _ := ret[0].(wire.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (_mr *MockProtocolMockRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Decode", reflect.TypeOf((*MockProtocol)(nil).Decode), arg0, arg1)
}

// DecodeEnveloped mocks base method
func (_m *MockProtocol) DecodeEnveloped(_param0 io.ReaderAt) (wire.Envelope, error) {
	ret := _m.ctrl.Call(_m, "DecodeEnveloped", _param0)
	ret0, _ := ret[0].(wire.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeEnveloped indicates an expected call of DecodeEnveloped
func (_mr *MockProtocolMockRecorder) DecodeEnveloped(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DecodeEnveloped", reflect.TypeOf((*MockProtocol)(nil).DecodeEnveloped), arg0)
}

// Encode mocks base method
func (_m *MockProtocol) Encode(_param0 wire.Value, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "Encode", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (_mr *MockProtocolMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Encode", reflect.TypeOf((*MockProtocol)(nil).Encode), arg0, arg1)
}

// EncodeEnveloped mocks base method
func (_m *MockProtocol) EncodeEnveloped(_param0 wire.Envelope, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "EncodeEnveloped", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeEnveloped indicates an expected call of EncodeEnveloped
func (_mr *MockProtocolMockRecorder) EncodeEnveloped(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EncodeEnveloped", reflect.TypeOf((*MockProtocol)(nil).EncodeEnveloped), arg0, arg1)
}

// MockEnvelopeAgnosticProtocol is a mock of EnvelopeAgnosticProtocol interface
type MockEnvelopeAgnosticProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeAgnosticProtocolMockRecorder
}

// MockEnvelopeAgnosticProtocolMockRecorder is the mock recorder for MockEnvelopeAgnosticProtocol
type MockEnvelopeAgnosticProtocolMockRecorder struct {
	mock *MockEnvelopeAgnosticProtocol
}

// NewMockEnvelopeAgnosticProtocol creates a new mock instance
func NewMockEnvelopeAgnosticProtocol(ctrl *gomock.Controller) *MockEnvelopeAgnosticProtocol {
	mock := &MockEnvelopeAgnosticProtocol{ctrl: ctrl}
	mock.recorder = &MockEnvelopeAgnosticProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEnvelopeAgnosticProtocol) EXPECT() *MockEnvelopeAgnosticProtocolMockRecorder {
	return _m.recorder
}

// Decode mocks base method
func (_m *MockEnvelopeAgnosticProtocol) Decode(_param0 io.ReaderAt, _param1 wire.Type) (wire.Value, error) {
	ret := _m.ctrl.Call(_m, "Decode", _param0, _param1)
	ret0, _ := ret[0].(wire.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (_mr *MockEnvelopeAgnosticProtocolMockRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Decode", reflect.TypeOf((*MockEnvelopeAgnosticProtocol)(nil).Decode), arg0, arg1)
}

// DecodeEnveloped mocks base method
func (_m *MockEnvelopeAgnosticProtocol) DecodeEnveloped(_param0 io.ReaderAt) (wire.Envelope, error) {
	ret := _m.ctrl.Call(_m, "DecodeEnveloped", _param0)
	ret0, _ := ret[0].(wire.Envelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeEnveloped indicates an expected call of DecodeEnveloped
func (_mr *MockEnvelopeAgnosticProtocolMockRecorder) DecodeEnveloped(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DecodeEnveloped", reflect.TypeOf((*MockEnvelopeAgnosticProtocol)(nil).DecodeEnveloped), arg0)
}

// DecodeRequest mocks base method
func (_m *MockEnvelopeAgnosticProtocol) DecodeRequest(_param0 wire.EnvelopeType, _param1 io.ReaderAt) (wire.Value, protocol.EnvelopeSpecificResponder, error) {
	ret := _m.ctrl.Call(_m, "DecodeRequest", _param0, _param1)
	ret0, _ := ret[0].(wire.Value)
	ret1, _ := ret[1].(protocol.EnvelopeSpecificResponder)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeRequest indicates an expected call of DecodeRequest
func (_mr *MockEnvelopeAgnosticProtocolMockRecorder) DecodeRequest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DecodeRequest", reflect.TypeOf((*MockEnvelopeAgnosticProtocol)(nil).DecodeRequest), arg0, arg1)
}

// Encode mocks base method
func (_m *MockEnvelopeAgnosticProtocol) Encode(_param0 wire.Value, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "Encode", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (_mr *MockEnvelopeAgnosticProtocolMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Encode", reflect.TypeOf((*MockEnvelopeAgnosticProtocol)(nil).Encode), arg0, arg1)
}

// EncodeEnveloped mocks base method
func (_m *MockEnvelopeAgnosticProtocol) EncodeEnveloped(_param0 wire.Envelope, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "EncodeEnveloped", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeEnveloped indicates an expected call of EncodeEnveloped
func (_mr *MockEnvelopeAgnosticProtocolMockRecorder) EncodeEnveloped(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EncodeEnveloped", reflect.TypeOf((*MockEnvelopeAgnosticProtocol)(nil).EncodeEnveloped), arg0, arg1)
}

// MockEnvelopeSpecificResponder is a mock of EnvelopeSpecificResponder interface
type MockEnvelopeSpecificResponder struct {
	ctrl     *gomock.Controller
	recorder *MockEnvelopeSpecificResponderMockRecorder
}

// MockEnvelopeSpecificResponderMockRecorder is the mock recorder for MockEnvelopeSpecificResponder
type MockEnvelopeSpecificResponderMockRecorder struct {
	mock *MockEnvelopeSpecificResponder
}

// NewMockEnvelopeSpecificResponder creates a new mock instance
func NewMockEnvelopeSpecificResponder(ctrl *gomock.Controller) *MockEnvelopeSpecificResponder {
	mock := &MockEnvelopeSpecificResponder{ctrl: ctrl}
	mock.recorder = &MockEnvelopeSpecificResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEnvelopeSpecificResponder) EXPECT() *MockEnvelopeSpecificResponderMockRecorder {
	return _m.recorder
}

// EncodeResponse mocks base method
func (_m *MockEnvelopeSpecificResponder) EncodeResponse(_param0 wire.Value, _param1 wire.EnvelopeType, _param2 io.Writer) error {
	ret := _m.ctrl.Call(_m, "EncodeResponse", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeResponse indicates an expected call of EncodeResponse
func (_mr *MockEnvelopeSpecificResponderMockRecorder) EncodeResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EncodeResponse", reflect.TypeOf((*MockEnvelopeSpecificResponder)(nil).EncodeResponse), arg0, arg1, arg2)
}
